name: Criação de Repositório MuleSoft automatizado

on:
  issues:
    types: [opened, reopened]

jobs:
  add-comment:
    name: Add initial comment on issue
    #runs-on: itau-linux
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.issue.labels.*.name, 'MuleSoft') }}
    steps:
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with: 
          issue-number: ${{ github.event.issue.number }}
          body: |
            Acompanhe o setup através do link: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          reactions: '+1'  

  form-to-json:
    name: Convert Form Issue to JSON
    #runs-on: itau-linux
    runs-on: ubuntu-latest
    needs: [add-comment]
    outputs:
      payload-parsed: ${{ steps.set-payload.outputs.json_var }}
      application-type: ${{ (fromJson(steps.set-payload.outputs.json_var)).Tipo_do_aplicacao }}
    steps:
      - name: Run issue form parser
        id: parse
        uses: peter-murray/issue-forms-body-parser@v2.0.0
        with:
          issue_id: ${{ github.event.issue.number }} 
          separator: '###'
          label_marker_start: '>>'
          label_marker_end: '<<'

      - name: Set output
        id: set-payload
        run: echo ::set-output name=json_var::'${{ steps.parse.outputs.payload }}'

      - name: Show output
        id: show-payload
        run: echo "${{ steps.set-payload.outputs.json_var }}"
        
      - name: Show selected application type
        id: show-application-type
        run: echo "${{ (fromJson(steps.set-payload.outputs.json_var)).Tipo_do_aplicacao }}"

  set-project-template:
    runs-on: ubuntu-latest
    needs: form-to-json
    outputs:
      template-name: ${{ steps.set-template.outputs.template }}
    steps:
      - name: Set Experience API repository name
        id: experience-api
        run: echo ::set-output name=repo_name::'experience-repo-name-here'

      - name: Set Process API repository name
        id: process-api
        run: echo ::set-output name=repo_name::'process-repo-name-here'
        
      - name: Set Domain API repository name
        id: domain-api
        run: echo ::set-output name=repo_name::'domain-repo-name-here'
        
      - name: Set System API repository name
        id: system-api
        run: echo ::set-output name=repo_name::'system-repo-name-here'
        
      - name: Set Batch Application repository name
        id: batch-app
        run: echo ::set-output name=repo_name::'batch-repo-name-here'
        
      - name: Set template name
        id: set-template
        run: |
          case "${{ needs.form-to-json.outputs.application-type }}" in
            "Experience API")
              echo ::set-output name=template::'${{ steps.experience-api.outputs.repo_name }}'
            ;;
            "Process API")
              echo ::set-output name=template::'${{ steps.process-api.outputs.repo_name }}'          
            ;;
            "Domain API")
              echo ::set-output name=template::'${{ steps.domain-api.outputs.repo_name }}'
            ;;
            "System API")
              echo ::set-output name=template::'${{ steps.system-api.outputs.repo_name }}'          
            ;;
            "Batch Application")
              echo ::set-output name=template::'${{ steps.batch-app.outputs.repo_name }}'          
            ;;
          esac

  validate-member:
    #uses: itau-corp/itau-up2-reusable-workflows-setup-iupipes/.github/workflow/validate-member.yml@v1
    runs-on: ubuntu-latest
    needs: 
      - form-to-json
      - set-project-template
    outputs:
      payload-parsed: ${{ steps.payload.outputs.json_var }}
    steps:
      - name: Set validate output
        id: payload
        run: echo ::set-output name=json_var::'${{ fromJson(needs.form-to-json.outputs.payload-parsed) }}'
      - name: Show entire json
        run: echo "${{ toJson(needs.form-to-json.outputs.payload-parsed) }}"
      - name: Show application type
        run: echo "${{ needs.form-to-json.outputs.application-type }}"
      - name: Show project template
        run: echo "${{ needs.set-project-template.outputs.template-project }}"

#  create-github-repo:
#    uses: itau-corp/itau-up2-reusable-workflows-setup-iupipes/.github/workflow/create-repo.yml@v1
#    needs:
#      - form-to-json
#      - validate-member
#    with:
#      payload: ${{ needs.form-to-json.outputs.payload-parsed }}

  final-comment:
    name: Add final comment on Issue
    #needs: [create-github-repo]
    needs: [validate-member]
#    runs-on: itau-linux
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.issue.labels.*.name, 'MuleSoft') }}
    steps:
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Sucesso na criação do repositório. Repositório criado: https://github.com/itau-corp/${{needs.create-github-repo.outputs.repo_name}}
          reactions: '+1'

  auto-closing-issue:
    name: Auto-closing Issue
#    runs-on: itau-linuxx
    runs-on: ubuntu-latest
    needs: [final-comment]
    steps:
      - name: Close Issue
        id: parse
        uses: peter-evans/close-issue@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: Fechando issue automaticamente
